package personal.mxl;

import sun.misc.BASE64Decoder;

import javax.imageio.ImageIO;
import javax.swing.*;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.*;
import java.sql.DatabaseMetaData;
import java.sql.ResultSet;
import java.text.SimpleDateFormat;
import java.util.List;
import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.stream.Collectors;

public class CommonUtils {
	static SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
	private static File tempFile = null;
	private static BufferedWriter bw = null;
	private static BASE64Decoder decoder = new BASE64Decoder();
	static String iconBase64 = "";

	public static ImageIcon getIcon() {
		ImageIcon icon = new ImageIcon();
		try {
			byte[] b = decoder.decodeBuffer(iconBase64);
			ByteArrayInputStream bais = new ByteArrayInputStream(b);
			BufferedImage bufferedImage = ImageIO.read(bais);
			Image big = bufferedImage.getScaledInstance(256, 256, Image.SCALE_DEFAULT);
			icon.setImage(big);
		} catch (IOException e) {
			e.printStackTrace();
		}
		return icon;
	}

	//下划线转驼峰
	public static String underline2Camel(String line, boolean smallCamel) {
		if (line == null || "".equals(line)) {
			return "";
		}
		StringBuilder sb = new StringBuilder();
		Pattern pattern = Pattern.compile("([A-Za-z\\d]+)(_)?");
		Matcher matcher = pattern.matcher(line);
		while (matcher.find()) {
			String word = matcher.group();
			sb.append(smallCamel && matcher.start() == 0 ? Character.toLowerCase(word.charAt(0)) : Character.toUpperCase(word.charAt(0)));
			int index = word.lastIndexOf('_');
			if (index > 0) {
				sb.append(word.substring(1, index).toLowerCase());
			} else {
				sb.append(word.substring(1).toLowerCase());
			}
		}
		return sb.toString();
	}

	//输出错误日志到error文件
	public static void saveErrorLog(String outputPath, String error) {
		File errorFile = new File(outputPath + "/error.log");
		BufferedWriter errorBw = null;
		try {
			errorBw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(errorFile, true), "UTF-8"));
			errorBw.write(format.format(new Date()) + "  " + error);
			errorBw.newLine();
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				assert errorBw != null;
				errorBw.flush();
				errorBw.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}

	}

	public static void saveConfig(String outputPath, String[] strings) {
		File configFile = new File(outputPath + "/config.txt");
		BufferedWriter configBw = null;
		try {
			configBw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(configFile), "UTF-8"));
			for (String string : strings) {
				configBw.write(string);
				configBw.newLine();
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				assert configBw != null;
				configBw.flush();
				configBw.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}

	}

	public static Map<String, String> readConfig(String outputPath) {
		File configFile = new File(outputPath + "/config.txt");
		BufferedReader configBr = null;
		Map<String, String> map = new HashMap<>();
		try {
			configBr = new BufferedReader(new InputStreamReader((new FileInputStream((configFile)))));
			if (!configBr.ready()) {
				saveErrorLog(outputPath, "文件暂时无法读取");
			}
			String line;
			while ((line = configBr.readLine()) != null) {
				map.put(line.split("=")[0], line.split("=")[1]);
			}
		} catch (Exception e) {
			saveErrorLog(outputPath, e.getMessage());
		} finally {
			try {
				assert configBr != null;
				configBr.close();
			} catch (IOException e) {
				saveErrorLog(outputPath, e.getMessage());
			}
			return map;
		}

	}

	public static void createFiles(Set<String> selectField, Set<String> selectType, DatabaseMetaData dbmd, String outputPath, String codeType) throws Exception {
		for (String field : selectField) {
			ResultSet rs = dbmd.getColumns(null, null, field, null);
			List<TableInfo> list = new ArrayList<>();
			while (rs.next()) {
				String tableName = rs.getString("TABLE_NAME");
				String columnName = rs.getString("COLUMN_NAME");
				String dataTypeName = rs.getString("TYPE_NAME");
				int ordinalPosition = rs.getInt("ORDINAL_POSITION");
				int columnSize = rs.getInt("COLUMN_SIZE");
				String remarks = rs.getString("REMARKS");
				list.add(new TableInfo(tableName, underline2Camel(tableName, false), columnName, dataTypeName, columnSize, remarks, ordinalPosition));
			}
			list.sort(Comparator.comparing(TableInfo::getOrdinalPosition));
			if ("大桥".equals(codeType)) {
				createController(list.get(0),outputPath);
				createService(list.get(0),outputPath);
				createServiceImpl(list.get(0),outputPath);
				createDto(list.get(0),outputPath);
				createEntity(list, outputPath);
				createMapper(list.get(0), outputPath);
				createXml(list, outputPath);
			} else if ("宠宠".equals(codeType)) {
				createController_tk(list.get(0), outputPath);
				createBiz_tk(list.get(0), outputPath);
				createMapper_tk(list.get(0), outputPath);
				createXml_tk(list, outputPath);
				createEntity_tk(list, outputPath);
			} else {
				throw new Exception("生成代码类型错误！");
			}
			closeBufferedWriter();
		}
	}

	//输出流 行写入
	private static void writeBufferLine(String str) {
		try {
			bw.write(str);
			bw.newLine();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	private static void createController(TableInfo tableInfo, String outputPath) throws Exception {
		initBufferedWriter(outputPath + "/" + underline2Camel(tableInfo.getTableName(), true) + "/" + tableInfo.getEntityName() + "Controller.java");
		writeBufferLine("package com.qd.api;");
		bw.newLine();
		writeBufferLine("import dto." + tableInfo.getEntityName() + "Dto;");
		writeBufferLine("import dto.ResponseBodyDto;");
		writeBufferLine("import com.qd.service."+tableInfo.getEntityName()+"Service;");
		writeBufferLine("import io.swagger.annotations.*;");
		writeBufferLine("import org.springframework.web.bind.annotation.*;");
		writeBufferLine("import javax.annotation.Resource;");

		bw.newLine();
		writeBufferLine("@Api(value = \"功能模块名\", description = \"功能模块名\")");
		writeBufferLine("@RestController");
		writeBufferLine("@RequestMapping(\"/" + underline2Camel(tableInfo.getTableName(), true) + "\")");
		writeBufferLine("public class " + tableInfo.getEntityName() + "Controller extends BaseController {");
		bw.newLine();
		writeBufferLine("   @Resource");
		writeBufferLine("   " + tableInfo.getEntityName() + "Service " + underline2Camel(tableInfo.getTableName(), true) + "Service;");
		bw.newLine();
		writeBufferLine("   @ApiOperation(value = \"查询\", notes = \"查询\")");
		writeBufferLine("   @ApiResponses({@ApiResponse(code = 200, message = \"success\", response = ResponseBodyDto.class)})\n");
		writeBufferLine("       @ApiImplicitParams({");
		writeBufferLine("            @ApiImplicitParam(name = \"taskId\", value = \"项目id\", dataType = \"Long\", paramType = \"query\", example = \"1\", required = true),");
		writeBufferLine("           @ApiImplicitParam(name = \"bridgeId\", value = \"桥梁id\", dataType = \"Long\", paramType = \"query\", example = \"1\", required = true)");
		writeBufferLine("   })");
		writeBufferLine("   @RequestMapping(value = \"/select" + tableInfo.getEntityName() + "\", method = RequestMethod.GET)");
		writeBufferLine("   @ResponseBody");
		writeBufferLine("   public ResponseBodyDto select" + tableInfo.getEntityName() + "( Long taskId, Long bridgeId )  {");
		writeBufferLine("        return new ResponseBodyDto<>( " + underline2Camel(tableInfo.getTableName(), true) + "Service.select" + tableInfo.getEntityName() + "(taskId,bridgeId));");
		writeBufferLine("   }");
		writeBufferLine("   @ApiOperation(value = \"保存\", notes = \"保存\")");
		writeBufferLine("   @ApiResponses({@ApiResponse(code = 200, message = \"success\", response = ResponseBodyDto.class)})");
		writeBufferLine("   @RequestMapping(value = \"/save" + tableInfo.getEntityName() + "\", method = RequestMethod.POST)");
		writeBufferLine("   @ResponseBody");
		writeBufferLine("   public ResponseBodyDto save" + tableInfo.getEntityName() + "( @RequestBody " + tableInfo.getEntityName() + "Dto " + underline2Camel(tableInfo.getTableName(), true) + "Dto )  {");
		writeBufferLine("        return new ResponseBodyDto<>( " + underline2Camel(tableInfo.getTableName(), true) + "Service.save" + tableInfo.getEntityName() + "(" + underline2Camel(tableInfo.getTableName(), true) + "Dto.get" + tableInfo.getEntityName() + "List()));");
		writeBufferLine("   }");
		writeBufferLine("}");
		bw.flush();
		bw.close();

	}

	private static void createService(TableInfo tableInfo, String outputPath) throws Exception {
		initBufferedWriter(outputPath + "/" + underline2Camel(tableInfo.getTableName(), true) + "/" + tableInfo.getEntityName() + "Service.java");
		writeBufferLine("package com.qd.service;");
		bw.newLine();
		writeBufferLine("import domain." + tableInfo.getEntityName()+";");
		writeBufferLine("import java.util.List;");
		writeBufferLine("import dto.ResponseBodyDto;");
		bw.newLine();
		writeBufferLine("public interface " + tableInfo.getEntityName() + "Service{");
		writeBufferLine("   List<" + tableInfo.getEntityName() + "> select" + tableInfo.getEntityName() + "(Long taskId, Long bridgeId);");
		writeBufferLine("   ResponseBodyDto save" + tableInfo.getEntityName() + "(List<" + tableInfo.getEntityName() + "> list);");
		writeBufferLine("}");
		bw.flush();
		bw.close();
	}

	private static void createServiceImpl(TableInfo tableInfo, String outputPath) throws Exception {
		initBufferedWriter(outputPath + "/" + underline2Camel(tableInfo.getTableName(), true) + "/" + tableInfo.getEntityName() + "ServiceImpl.java");
		writeBufferLine("package com.qd.service.impl;");
		bw.newLine();
		writeBufferLine("import domain." + tableInfo.getEntityName() + ";");
		writeBufferLine("import com.qd.mapper." + tableInfo.getEntityName() + "Mapper" + ";");
		writeBufferLine("import com.qd.service." + tableInfo.getEntityName() + "Service" + ";");
		writeBufferLine("import dto.ResponseBodyDto;");
		writeBufferLine("import org.springframework.stereotype.Service;");
		writeBufferLine("import javax.annotation.Resource;");
		bw.newLine();
		writeBufferLine("import java.util.List;");
		writeBufferLine("import java.util.ArrayList;");
		bw.newLine();
		writeBufferLine("@Service");
		writeBufferLine("public class " + tableInfo.getEntityName() + "ServiceImpl implements " + tableInfo.getEntityName() + "Service{");
		writeBufferLine("   @Resource");
		writeBufferLine("   " + tableInfo.getEntityName() + "Mapper " + underline2Camel(tableInfo.getTableName(), true) + "Mapper;");
		bw.newLine();
		writeBufferLine("   @Override");
		writeBufferLine("   public List<" + tableInfo.getEntityName() + "> select" + tableInfo.getEntityName() + "(Long taskId, Long bridgeId) {");
		writeBufferLine("       return " + underline2Camel(tableInfo.getTableName(), true) + "Mapper.selectByTaskIdAndbridgeId(taskId, bridgeId);");
		writeBufferLine("   }");
		bw.newLine();
		writeBufferLine("   @Override");
		writeBufferLine("   public ResponseBodyDto save" + tableInfo.getEntityName() + "(List<" + tableInfo.getEntityName() + "> list) {");
		writeBufferLine("       ResponseBodyDto responseBodyDto = new ResponseBodyDto();");
		writeBufferLine("       List<String> error = new ArrayList<>();");
		writeBufferLine("       if (null == list) {");
		writeBufferLine("           return null;");
		writeBufferLine("       }");
		writeBufferLine("       for (" + tableInfo.getEntityName() + " " + underline2Camel(tableInfo.getTableName(), true) + " : list) {");
		writeBufferLine("           try {");
		writeBufferLine("               if (null == " + underline2Camel(tableInfo.getTableName(), true) + ".getId()) {");
		writeBufferLine("                   " + underline2Camel(tableInfo.getTableName(), true) + "Mapper.insertSelective(" + underline2Camel(tableInfo.getTableName(), true) + ");");
		writeBufferLine("               } else {");
		writeBufferLine("                   " + underline2Camel(tableInfo.getTableName(), true) + "Mapper.updateByPrimaryKeySelective(" + underline2Camel(tableInfo.getTableName(), true) + ");");
		writeBufferLine("               }");
		writeBufferLine("           } catch (Exception e) {");
		writeBufferLine("                   e.printStackTrace();");
		writeBufferLine("                   error.add(\"添加失败\");");
		writeBufferLine("           }");
		writeBufferLine("       }");
		writeBufferLine("       if (error.size() > 0) {");
		writeBufferLine("           responseBodyDto.setCode(2001);");
		writeBufferLine("           responseBodyDto.setData(error);");
		writeBufferLine("       }");
		writeBufferLine("       return responseBodyDto;");
		writeBufferLine("   }");
		writeBufferLine("}");
		bw.flush();
		bw.close();
	}

	private static void createDto(TableInfo tableInfo, String outputPath) throws Exception {
		initBufferedWriter(outputPath + "/" + underline2Camel(tableInfo.getTableName(), true) + "/" + tableInfo.getEntityName() + "Dto.java");
		writeBufferLine("package dto;");
		writeBufferLine("import domain." + tableInfo.getEntityName() + ";");
		bw.newLine();
		writeBufferLine("public class " + tableInfo.getEntityName() + "Dto {");
		writeBufferLine("   private List<" + tableInfo.getEntityName() + "> " + underline2Camel(tableInfo.getTableName(), true) + "List;");
		bw.newLine();
		writeBufferLine("   public List<" + tableInfo.getEntityName() + "> get" + tableInfo.getEntityName() + "List() {");
		writeBufferLine("       return " + underline2Camel(tableInfo.getTableName(), true) + "List;");
		writeBufferLine("   }");
		bw.newLine();
		writeBufferLine("   public void set" + tableInfo.getEntityName() + "List(List<" + tableInfo.getEntityName() + "> " + underline2Camel(tableInfo.getTableName(), true) + "List) {");
		writeBufferLine("       this." + underline2Camel(tableInfo.getTableName(), true) + "List = " + underline2Camel(tableInfo.getTableName(), true) + "List;");
		writeBufferLine("   }");
		writeBufferLine("}");
	}

	private static void createMapper(TableInfo tableInfo, String outputPath) throws Exception {
		initBufferedWriter(outputPath + "/" + underline2Camel(tableInfo.getTableName(), true) + "/" + tableInfo.getEntityName() + "Mapper.java");
		writeBufferLine("import domain." + tableInfo.getEntityName() + ";");
		bw.newLine();
		writeBufferLine("public interface " + tableInfo.getEntityName() + "Mapper {");
		bw.newLine();
		writeBufferLine("    int deleteByPrimaryKey(" + changeType(tableInfo.getDataTypeName(), tableInfo.getColumnSize()) + " " + underline2Camel(tableInfo.getColumnName(), true) + ");");
		bw.newLine();
		writeBufferLine("    int insert(" + tableInfo.getEntityName() + " record);");
		bw.newLine();
		writeBufferLine("    int insertSelective(" + tableInfo.getEntityName() + " record);");
		bw.newLine();
		writeBufferLine("    " + tableInfo.getEntityName() + " selectByPrimaryKey(" + changeType(tableInfo.getDataTypeName(), tableInfo.getColumnSize()) + " " + underline2Camel(tableInfo.getColumnName(), true) + ");");
		bw.newLine();
		writeBufferLine("    int updateByPrimaryKeySelective(" + tableInfo.getEntityName() + " record);");
		bw.newLine();
		writeBufferLine("    int updateByPrimaryKey(" + tableInfo.getEntityName() + " record);");
		bw.newLine();
		writeBufferLine("}");
		bw.flush();
		bw.close();

	}

	private static void createEntity(List<TableInfo> list, String outputPath) throws Exception {
		if (list.size() > 0) {
			initBufferedWriter(outputPath + "/" + underline2Camel(list.get(0).getTableName(), true) + "/" + list.get(0).getEntityName() + ".java");
			writeBufferLine("import java.util.Date;");
			bw.newLine();
			writeBufferLine("public class " + list.get(0).getEntityName() + " {");
			for (TableInfo tableInfo : list) {
				writeBufferLine("    /**");
				writeBufferLine("     * " + tableInfo.getRemarks());
				writeBufferLine("     */");
				writeBufferLine("    private " + changeType(tableInfo.getDataTypeName(), tableInfo.getColumnSize()) + " " + underline2Camel(tableInfo.getColumnName(), true) + ";");
				bw.newLine();
			}
			for (TableInfo tableInfo : list) {
				writeBufferLine("    public " + changeType(tableInfo.getDataTypeName(), tableInfo.getColumnSize()) + " get" + underline2Camel(tableInfo.getColumnName(), false) + "() {");
				writeBufferLine("        return " + underline2Camel(tableInfo.getColumnName(), true) + ";");
				writeBufferLine("    }");
				bw.newLine();
				writeBufferLine("    public void set" + underline2Camel(tableInfo.getColumnName(), false) + "(" + changeType(tableInfo.getDataTypeName(), tableInfo.getColumnSize()) + " " + underline2Camel(tableInfo.getColumnName(), true) + ") {");
				writeBufferLine("        this." + underline2Camel(tableInfo.getColumnName(), true) + " = " + underline2Camel(tableInfo.getColumnName(), true) + ";");
				writeBufferLine("    }");
				bw.newLine();
			}
			writeBufferLine("}");
			bw.flush();
			bw.close();
		}
	}

	private static void createXml(List<TableInfo> list, String outputPath) throws Exception {
		if (list.size() > 0) {
			initBufferedWriter(outputPath + "/" + underline2Camel(list.get(0).getTableName(), true) + "/" + list.get(0).getEntityName() + "Mapper.xml");
			writeBufferLine("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
			writeBufferLine("<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">");
			writeBufferLine("<mapper namespace=\"com.qd.mapper." + list.get(0).getEntityName() + "Mapper\">");
			writeBufferLine("   <resultMap id=\"BaseResultMap\" type=\"domain." + list.get(0).getEntityName() + "\">");
			for (int i = 0; i < list.size(); i++) {
				if (i == 0) {
					writeBufferLine("       <id column=\"" + list.get(i).getColumnName() + "\" jdbcType=\"" + list.get(i).getDataTypeName().split(" ")[0] + "\" property=\"" + underline2Camel(list.get(i).getColumnName(), true) + "\" />");
				} else {
					writeBufferLine("       <result column=\"" + list.get(i).getColumnName() + "\" jdbcType=\"" + list.get(i).getDataTypeName().split(" ")[0] + "\" property=\"" + underline2Camel(list.get(i).getColumnName(), true) + "\" />");
				}
			}
			writeBufferLine("   </resultMap>");
			writeBufferLine("   <sql id=\"Base_Column_List\">");
			writeBufferLine("       " + list.stream().map(a -> a.getColumnName()).collect(Collectors.joining(", ")));
			writeBufferLine("   </sql>");
			writeBufferLine("   <sql id=\"Base_Column_List_Entity\">");
			writeBufferLine("       " + list.stream().map(a -> a.getColumnName() + " " + underline2Camel(a.getColumnName(), true)).collect(Collectors.joining(", ")));
			writeBufferLine("   </sql>");
			writeBufferLine("   <select id=\"selectByPrimaryKey\" parameterType=\"java.lang." + changeType(list.get(0).getDataTypeName().split(" ")[0], list.get(0).getColumnSize()) + "\" resultMap=\"BaseResultMap\">");
			writeBufferLine("       select");
			writeBufferLine("       <include refid=\"Base_Column_List\" />");
			writeBufferLine("       from " + list.get(0).getTableName());
			writeBufferLine("       where " + list.get(0).getColumnName() + " = #{" + underline2Camel(list.get(0).getColumnName(), true) + ",jdbcType=" + list.get(0).getDataTypeName().split(" ")[0] + "}");
			writeBufferLine("   </select>");
			writeBufferLine("   <delete id=\"deleteByPrimaryKey\" parameterType=\"java.lang." + changeType(list.get(0).getDataTypeName().split(" ")[0], list.get(0).getColumnSize()) + "\">");
			writeBufferLine("       delete from " + list.get(0).getTableName());
			writeBufferLine("       where " + list.get(0).getColumnName() + " = #{" + underline2Camel(list.get(0).getColumnName(), true) + ",jdbcType=" + list.get(0).getDataTypeName().split(" ")[0] + "}");
			writeBufferLine("   </delete>");
			writeBufferLine("   <insert id=\"insert\" parameterType=\"domain." + list.get(0).getEntityName() + "\">");
			writeBufferLine("       insert into " + list.get(0).getTableName() + "(");
			writeBufferLine("           " + list.stream().map(a -> a.getColumnName()).collect(Collectors.joining(", ")));
			writeBufferLine("       )");
			writeBufferLine("       values (");
			for (int i = 0; i < list.size(); i++) {
				bw.write("          #{" + underline2Camel(list.get(i).getColumnName(), true) + ",jdbcType=" + list.get(i).getDataTypeName().split(" ")[0] + "}");
				if (i != list.size() - 1) {
					bw.write(", ");
				}
				bw.newLine();
			}
			writeBufferLine("       )");
			writeBufferLine("   </insert>");
			writeBufferLine("   <insert id=\"insertSelective\" parameterType=\"domain." + list.get(0).getEntityName() + "\">");
			writeBufferLine("       insert into " + list.get(0).getTableName());
			writeBufferLine("       <trim prefix=\" (\" suffix=\")\" suffixOverrides=\",\">");
			for (int i = 0; i < list.size(); i++) {
				writeBufferLine("           <if test=\"" + underline2Camel(list.get(i).getColumnName(), true) + "!= null\">");
				writeBufferLine("               " + list.get(i).getColumnName() + ",");
				writeBufferLine("           </if>");
			}
			writeBufferLine("       </trim>");
			writeBufferLine("       <trim prefix=\"values(\" suffix=\")\" suffixOverrides=\",\">");
			for (int i = 0; i < list.size(); i++) {
				writeBufferLine("           <if test=\"" + underline2Camel(list.get(i).getColumnName(), true) + "!= null\">");
				writeBufferLine("               #{" + underline2Camel(list.get(i).getColumnName(), true) + ",jdbcType=" + list.get(i).getDataTypeName().split(" ")[0] + "},");
				writeBufferLine("           </if>");
			}
			writeBufferLine("       </trim>");
			writeBufferLine("   </insert>");
			writeBufferLine("   <update id=\"updateByPrimaryKey\" parameterType=\"domain." + list.get(0).getEntityName() + "\">");
			writeBufferLine("       update " + list.get(0).getTableName() + " set");
			for (int i = 0; i < list.size(); i++) {
				if (i != 0) {
					bw.write("              " + list.get(i).getColumnName() + " = #{" + underline2Camel(list.get(i).getColumnName(), true) + ",jdbcType=" + list.get(i).getDataTypeName().split(" ")[0] + "}");
					if (i != list.size() - 1) {
						bw.write(", ");
					}
					bw.newLine();
				}
			}
			writeBufferLine("       where " + list.get(0).getColumnName() + " = #{" + underline2Camel(list.get(0).getColumnName(), true) + ",jdbcType=" + list.get(0).getDataTypeName().split(" ")[0] + "}");
			writeBufferLine("   </update>");
			writeBufferLine("   <update id=\"updateByPrimaryKeySelective\" parameterType=\"domain." + list.get(0).getEntityName() + "\">");
			writeBufferLine("       update " + list.get(0).getTableName());
			writeBufferLine("       <set>");
			for (int i = 0; i < list.size(); i++) {
				if (i != 0) {
					writeBufferLine("           <if test=\"" + underline2Camel(list.get(i).getColumnName(), true) + "!= null\">");
					writeBufferLine("           " + list.get(i).getColumnName() + "= #{" + underline2Camel(list.get(i).getColumnName(), true) + ",jdbcType = " + list.get(i).getDataTypeName().split(" ")[0] + "},");
					writeBufferLine("           </if>");
				}
			}
			writeBufferLine("       </set>");
			writeBufferLine("       where " + list.get(0).getColumnName() + "= #{" + underline2Camel(list.get(0).getColumnName(), true) + ",jdbcType=" + list.get(0).getDataTypeName().split(" ")[0] + "}");
			writeBufferLine("   </update>");
			writeBufferLine("</mapper>");
			bw.flush();
			bw.close();
		}


	}

	private static void createEntity_tk(List<TableInfo> list, String outputPath) throws Exception {
		if (list.size() > 0) {
			initBufferedWriter(outputPath + "/" + underline2Camel(list.get(0).getTableName(), true) + "/" + list.get(0).getEntityName() + ".java");
			writeBufferLine("package com.yule.chongchong.api." + list.get(0).getTableName() + ";");
			bw.newLine();
			writeBufferLine("import lombok.Data;");
			writeBufferLine("import javax.persistence.Column;");
			writeBufferLine("import javax.persistence.Id;");
			writeBufferLine("import javax.persistence.Table;");
			writeBufferLine("import javax.validation.constraints.*;");
			writeBufferLine("import java.util.Date;");
			bw.newLine();
			writeBufferLine("@Data");
			writeBufferLine("@Table(name=\"" + list.get(0).getEntityName() + "\")");
			writeBufferLine("public class " + list.get(0).getEntityName() + " {");
			for (int i = 0; i < list.size(); i++) {
				writeBufferLine("    /**");
				writeBufferLine("     * " + list.get(i).getRemarks());
				writeBufferLine("     */");
				if (i == 0) {
					writeBufferLine("    @Id");
				}
				writeBufferLine("    @Column(name = \"" + list.get(i).getColumnName() + "\")");
				writeBufferLine("    private " + changeType(list.get(i).getDataTypeName(), list.get(i).getColumnSize()) + " " + underline2Camel(list.get(i).getColumnName(), true) + ";");
				bw.newLine();
			}
			writeBufferLine("}");
			bw.flush();
			bw.close();
		}
	}

	private static void createMapper_tk(TableInfo tableInfo, String outputPath) throws Exception {
		initBufferedWriter(outputPath + "/" + underline2Camel(tableInfo.getTableName(), true) + "/" + tableInfo.getEntityName() + "Mapper.java");
		writeBufferLine("package com.yule.chongchong.api." + tableInfo.getTableName() + ";");
		bw.newLine();
		writeBufferLine("import tk.mybatis.mapper.common.Mapper;");
		writeBufferLine("@org.apache.ibatis.annotations.Mapper");
		bw.newLine();
		writeBufferLine("public interface " + tableInfo.getEntityName() + "Mapper extends Mapper<" + tableInfo.getEntityName() + "> {");
		bw.newLine();
		writeBufferLine("}");
		bw.flush();
		bw.close();

	}

	private static void createXml_tk(List<TableInfo> list, String outputPath) throws Exception {
		if (list.size() > 0) {
			initBufferedWriter(outputPath + "/" + underline2Camel(list.get(0).getTableName(), true) + "/" + list.get(0).getEntityName() + "Mapper.xml");
			writeBufferLine("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
			writeBufferLine("<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">");
			writeBufferLine("<mapper namespace=\"" + list.get(0).getEntityName() + "Mapper\">");
			writeBufferLine("   <resultMap id=\"BaseResultMap\" type=\"com.yule.chongchong.api." + underline2Camel(list.get(0).getTableName(), true) + "." + list.get(0).getEntityName() + "\">");
			for (int i = 0; i < list.size(); i++) {
				if (i == 0) {
					writeBufferLine("       <id column=\"" + list.get(i).getColumnName() + "\" jdbcType=\"" + list.get(i).getDataTypeName().split(" ")[0] + "\" property=\"" + underline2Camel(list.get(i).getColumnName(), true) + "\" />");
				} else {
					writeBufferLine("       <result column=\"" + list.get(i).getColumnName() + "\" jdbcType=\"" + list.get(i).getDataTypeName().split(" ")[0] + "\" property=\"" + underline2Camel(list.get(i).getColumnName(), true) + "\" />");
				}
			}
			writeBufferLine("   </resultMap>");
			writeBufferLine("</mapper>");
			bw.flush();
			bw.close();
		}


	}

	private static void createBiz_tk(TableInfo tableInfo, String outputPath) throws Exception {
		initBufferedWriter(outputPath + "/" + underline2Camel(tableInfo.getTableName(), true) + "/" + tableInfo.getEntityName() + "Biz.java");
		writeBufferLine("package com.yule.chongchong.api." + tableInfo.getTableName() + ";");
		bw.newLine();
		writeBufferLine("import com.yule.chongchong.common.base.BaseBiz;");
		writeBufferLine("import org.springframework.beans.factory.annotation.Autowired;");
		writeBufferLine("import org.springframework.stereotype.Service;");
		writeBufferLine("import org.springframework.transaction.annotation.Transactional;");
		bw.newLine();
		writeBufferLine("@Service");
		writeBufferLine("@Transactional(rollbackFor = Exception.class)");
		writeBufferLine("public class " + tableInfo.getEntityName() + "Biz extends BaseBiz<" + tableInfo.getEntityName() + "Mapper, " + tableInfo.getEntityName() + "> {");
		bw.newLine();
		writeBufferLine("   @Autowired");
		writeBufferLine("   " + tableInfo.getEntityName() + "Mapper " + underline2Camel(tableInfo.getTableName(), true) + "Mapper;");
		bw.newLine();
		writeBufferLine("}");
		bw.flush();
		bw.close();

	}

	private static void createController_tk(TableInfo tableInfo, String outputPath) throws Exception {
		initBufferedWriter(outputPath + "/" + underline2Camel(tableInfo.getTableName(), true) + "/" + tableInfo.getEntityName() + "Controller.java");
		writeBufferLine("package com.yule.chongchong.api." + tableInfo.getTableName() + ";");
		bw.newLine();
		writeBufferLine("import com.yule.chongchong.common.base.BaseController;");
		writeBufferLine("import com.yule.chongchong.common.base.BaseResponse;");
		writeBufferLine("import io.swagger.annotations.ApiOperation;");
		writeBufferLine("import io.swagger.annotations.ApiResponse;");
		writeBufferLine("import io.swagger.annotations.ApiResponses;");
		writeBufferLine("import org.springframework.beans.factory.annotation.Autowired;");
		writeBufferLine("import org.springframework.validation.annotation.Validated;");
		writeBufferLine("import org.springframework.web.bind.annotation.*;");
		bw.newLine();
		writeBufferLine("@RestController");
		writeBufferLine("@RequestMapping(\"/" + underline2Camel(tableInfo.getTableName(), true) + "\")");
		writeBufferLine("public class " + tableInfo.getEntityName() + "Controller extends BaseController {");
		bw.newLine();
		writeBufferLine("   @Autowired");
		writeBufferLine("   " + tableInfo.getEntityName() + "Biz " + underline2Camel(tableInfo.getTableName(), true) + "Biz;");
		bw.newLine();
		writeBufferLine("   @ApiOperation(value = \"demo\", notes = \"demo\")");
		writeBufferLine("   @ApiResponses({@ApiResponse(code = 200, message = \"success\", response = BaseResponse.class)})\n");
		writeBufferLine("   @RequestMapping(value = \"/demo\", method = RequestMethod.POST)");
		writeBufferLine("   @ResponseBody");
		writeBufferLine("   public BaseResponse demo( @RequestBody @Validated  " + tableInfo.getEntityName() + " " + underline2Camel(tableInfo.getTableName(), true) + ")  {");
		writeBufferLine("       return BaseResponse.success();");
		writeBufferLine("   }");
		writeBufferLine("}");
		bw.flush();
		bw.close();

	}

	private static void initBufferedWriter(String filePath) throws Exception {
		File file = new File(filePath.substring(0, filePath.lastIndexOf("/")));
		if (!file.exists()) {
			file.mkdir();
		}
		tempFile = new File(filePath);
		if (tempFile.isFile()) {
			tempFile.delete();
		}
		bw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(tempFile, true), "UTF-8"));
	}
	private static void closeBufferedWriter() throws Exception {
		try{
			bw.close();
		}catch (Exception e){}


	}


	private static String changeType(String type, int length) {
		if (type.equals("BIT")) {
			if (length > 1) {
				return "byte[]";
			} else {
				return "Boolean";
			}
		} else if (type.equals("TINYINT") || type.equals("BOOL") || type.equals("BOOLEAN")) {
			return "Boolean";
		} else if (type.equals("SMALLINT") || type.equals("MEDIUMINT") || type.equals("INT") || type.equals("INTERGER")) {
			return "Integer";
		} else if (type.equals("BIGINT") || type.equals("BIGINT UNSIGNED")) {
			return "Long";
		} else if (type.equals("FLOAT")) {
			return "Float";
		} else if (type.equals("DECIMAL")) {
			return "BigDecimal";
		} else if (type.equals("DATE") || type.equals("DATETIME") || type.equals("TIMESTAMP")) {
			return "Date";
		} else {
			return "String";
		}

	}


}
